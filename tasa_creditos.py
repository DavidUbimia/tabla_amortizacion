import streamlit as st
import pandas as pd
from functions import *

# T√≠tulo y descripci√≥n
st.markdown("# :blue[Comparador de Tasas de Cr√©dito]")
st.markdown("""
Ingresa los detalles de tus cr√©ditos para calcular y comparar las tasas de inter√©s.
La tasa se calcula usando un m√©todo num√©rico propio (Newton-Raphson).
""")

# Inicializar valores en session_state
if 'creditos' not in st.session_state:
    st.session_state.creditos = []

# if 'tab_print' not in st.session_state:
#     st.session_state.tab_print = None

for key, default in {
    "nombre_credito_input": "",
    "num_pagos_input": 0,
    "pago_input": 0,
    "monto_input": 0
}.items():
    if key not in st.session_state:
        st.session_state[key] = default

# Si se activ√≥ la limpieza del formulario
if st.session_state.get("clear_form", False):
    st.session_state.nombre_credito_input = ""
    st.session_state.num_pagos_input = 0
    st.session_state.pago_input = 0
    st.session_state.monto_input = 0
    st.session_state.clear_form = False

# Formulario
with st.expander("**Agregar Cr√©dito**", expanded=len(st.session_state.creditos)==0):
    with st.form("credito_form"):
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            nom_credito = st.text_input("**Nombre del cr√©dito**", placeholder="Cr√©dito 1", key="nombre_credito_input")

        with col3:
            num_pagos = st.number_input("**N√∫mero de pagos**", min_value=0, step=1, key="num_pagos_input")

        with col4:
            pago = st.number_input("**Pago**", min_value=0, key="pago_input")

        with col2:
            monto = st.number_input("**Monto del cr√©dito**", min_value=0, key="monto_input")

        submitted = st.form_submit_button("**Agregar Cr√©dito**")

        if submitted:
            if nom_credito == '':
                st.error("Indica el nombre del cr√©dito a agregar!", icon="üö®")
            elif monto == 0:
                st.error("El monto del cr√©dito no puede ser cero!", icon="üö®")
            elif num_pagos == 0:
                st.error("El n√∫mero de pagos no puede ser cero!", icon="üö®")
            elif pago == 0:
                st.error("El pago √≥ abono no puede ser cero!", icon="üö®")
            elif pago * num_pagos <= monto:
                str_warning = f"[Explicaci√≥n]: Si se multiplica el pago igual a {pago} por el n√∫mero de pagos {num_pagos}, el resultado es {pago * num_pagos}, el cual es menor al monto solicitado {monto}. Por ello hay un error."
                st.error("El valor total de pagos debe ser mayor que el monto del cr√©dito!", icon="üö®")
                st.warning(str_warning)
            else:
                tasa = round(calcular_tasa(num_pagos, pago, monto), ndigits=2)
                if tasa is not None and tasa >= 0:
                    nuevo_credito = {
                        'Nombre cr√©dito': nom_credito,
                        'N√∫mero de pagos': num_pagos,
                        'Pago': pago,
                        'Monto del cr√©dito': monto,
                        'Tasa mensual': tasa,
                        'Tasa anual nominal': tasa * 12,
                        'Tasa anual efectiva': (1 + tasa)**12 - 1
                    }
                    st.session_state.creditos.append(nuevo_credito)
                    st.success("Cr√©dito agregado correctamente!")

                    # Activar bandera de limpieza y reiniciar
                    st.session_state.clear_form = True
                    st.rerun()
                else:
                    st.error("No se pudo calcular una tasa v√°lida. Verifica los datos.")

# Mostrar resumen de cr√©ditos
if len(st.session_state.creditos) > 0:
    st.subheader("Resumen de Cr√©ditos")

    df = pd.DataFrame(st.session_state.creditos)

    df_display = df.copy()
    df_display['Pago'] = df_display['Pago'].map("${:,.2f}".format)
    df_display['Monto del cr√©dito'] = df_display['Monto del cr√©dito'].map("${:,.2f}".format)
    df_display['Tasa mensual'] = df_display['Tasa mensual'].apply(lambda x: f"{x:.2%}")
    df_display['Tasa anual nominal'] = df_display['Tasa anual nominal'].apply(lambda x: f"{x:.2%}")
    df_display['Tasa anual efectiva'] = df_display['Tasa anual efectiva'].apply(lambda x: f"{x:.2%}")

    st.dataframe(df_display[['Nombre cr√©dito','N√∫mero de pagos', 'Pago', 'Monto del cr√©dito', 
                            'Tasa mensual', 'Tasa anual nominal', 'Tasa anual efectiva']], 
                hide_index=True)

    st.subheader("Comparaci√≥n de Tasas Anuales Efectivas")
    st.bar_chart(df.set_index('Nombre cr√©dito')['Tasa anual efectiva']*100, 
                 x_label="Cr√©ditos", y_label="Tasa efectiva anual")

    #---------------------------------------------- Impresi√≥n de pdf
    # Par√°metros
    # T√≠tulo y par√°metros
    titulo = "Tabla comparativa tasas"
    param1 = "Se debe tomar mucho en cuenta la comparativa para el caso tasa efectiva anual."
    param2 = "Como segunda observaci√≥n la comparaci√≥n para la tasa nominal anual."
    param3 = "Como √∫ltimo tip, observar al mes qu√© tasa mensual es m√°s baja directamente."
    parametros = {
        "Informaci√≥n 1": param1,
        "Informaci√≥n 2": param2,
        "Informaci√≥n 3": param3
    }

    # Prepara el DataFrame como texto
    df_pdf = df_display.copy()
    for col in df_pdf.columns:
        df_pdf[col] = df_pdf[col].astype(str)

    # Generar PDF
    # pdf_bytes = generar_pdf(df_pdf, titulo, parametros)
    pdf_bytes = generar_pdf_tabla(df_pdf, titulo, parametros)
    # Descargar
    st.download_button(
        label="üì• Descargar PDF",
        data=pdf_bytes,
        file_name="tabla_comparativa_tasas.pdf",
        mime="application/pdf"
    )



    if st.button("Limpiar todos los cr√©ditos"):
        st.session_state.creditos = []
        # st.session_state.tab_print = None
        st.rerun()
else:
    st.info("Agrega al menos un cr√©dito para comenzar.")

